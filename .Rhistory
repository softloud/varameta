?gexp
??gexp
?g_exp
library(varameta)
?g_exp
g_exp(3, 5)
varameta:::g_exp(3,5)
library(varameta)
varameta::g_exp(3,5)
varameta:::g_exp(3,5)
varameta:::g_exp(3,5) == Inf
?g_cauchy
vignette("rd")
library(varameta)
library(varameta)
?g_
?g_cauchy
vignette("rd")
library(varameta)
?g_cauchy
?g_cauchy
library(varameta)
?g_cauchy
?g_exp
library(varameta)
?g_exp
?g_exp
?g_cauchy
library(varameta)
library(varameta)
?wan_mean_C1
library(varameta)
?bland_se
library(varameta)
panda("There are days where documentation is oddly satisfying.")
knitr::opts_chunk$set(echo = TRUE)
demo_sim <- metasims()
library(simeta)
demo_sim <- metasims()
?metasims()
sims %>% objects()
demo_sim %>% objects()
demo_sim$arguments
# packages
library(simeta)
library(tidyverse)
# make a table of
demo_sim %>%
pluck("arguments")
# make a table of
demo_sim %>%
pluck("arguments") %>%
kableExtra::kable()
demo_sim %>%
pluck("arguments")
demo_sim %>%
pluck("distributions")
?simeta
demo_sim %>%
pluck("distributions") %>%
mutate(dist_fn = map(dist, .f = function(x) {
paste0("d", x) %>% get()
}))
?dpareto
# packages
library(simeta)
library(actuar)
library(tidyverse)
demo_sim %>%
pluck("distributions") %>%
mutate(dist_fn = map(dist, .f = function(x) {
paste0("d", x) %>% get()
}))
?stat_fun
library(ggplot2)
?stat_fun
?stat_function
ggplot(aes(x = c(0, 1)))
tibble(x = c(0,1)) %>%
ggplot(aes(x = x)) +
stat_function(fun = rnorm, args = list(mean = 3, sd = 0.2))
tibble(x = c(0,1)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean = 3, sd = 0.2))
tibble(x = c(0,1)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean = 0.5, sd = 0.2))
fns <- demo_sim %>%
pluck("distributions") %>%
mutate(dist_fn = map(dist, .f = function(x) {
paste0("d", x) %>% get()
}))
fns
print(x,y)
map2_df(fns$dist, fns$par, .f = function(x,y) {
print(x,y)
})
map2_df(fns$dist, fns$par, .f = function(x,y) {
print(x)
})
map2_df(fns$dist, fns$par, .f = function(x,y) {
print(x)
})
map2_df(fns$dist, fns$par, .f = function(x,y) {
cat(x)
})
seq(1:10)
seq(1:10)
?simeta
map2_df(fns$dist_fn, fns$par, .f = function(dist, par) {
tibble(
x = seq(1:10)
) %>%
mutate(y = density_fn(x,
distribution = dist,
parameters = par))
})
map2(fns$dist_fn, fns$par, .f = function(dist, par) {
tibble(
x = seq(1:10)
) %>%
mutate(y = density_fn(x,
distribution = dist,
parameters = par))
})
map2(fns$dist_fn, fns$par, .f = function(dist, par) {
tibble(
x = seq(1:10)
) %>%
mutate(y = density_fn(x,
distribution = dist,
parameters = par,
type = "d"))
})
map2(fns$dist_fn, fns$par, .f = function(dist, par) {
tibble(
x = seq(1:10)
) %>%
mutate(y = density_fn(x,
distribution = dist,
parameters = par,
type = "d"))
})
map2(fns$dist_fn, fns$par, .f = function(dist, par) {
tibble(
x = seq(1:10)
) %>%
mutate(y = density_fn(x,
distribution = dist,
parameters = par,
type = "d"))})
fns
fns %>%
slice(1)
?density_fn
fns$dist_fn
fns
?map2
distns <- demo_sim %>%
pluck("distributions")
distributions <- demo_sim %>%
pluck("distributions")
distributions
distributions %>% {
map2(.$dist, .$par,
.f = function(d, p) {
density_fn(0.5, d, p, "d")
})
}
?density_fn
library(varameta)
knitr::opts_chunk$set(echo = TRUE)
distributions %>% {
map2(.$dist, .$par,
.f = function(d, p) {
density_fn(0.5, d, p, "d")
})
}
usethis::use_vignette("varmeta")
?effect_se
library(varameta)
?effect_se
library(varameta)
effect_se(
centre = 5,
spread = 0.2,
n = 3,
centre_type = "mean",
spread_type = "var"
)
effect_se(
centre = 5,
spread = 0.2,
n = 3,
centre_type = "mean",
spread_type = "var"
)
0.2/5
0.2/3
0.2 / sqrt(3)
0.2 / sqrt(3)^2
0.2 / sqrt(3)
effect_se(
centre = 5,
spread = 0.2,
n = 3,
centre_type = "mean",
spread_type = "sd"
)
effect_se(
centre = 5,
spread = 0.2,
n = 3,
centre_type = "mean",
spread_type = "sd"
)
library(varameta)
set.seed(39)
library(varameta)
a_sample <- rnorm(100, mean = 30, sd = 0.3)
# consider a randomly generated sample
a_sample <- rlnorm(10, 4, 0.2)
a_sample %>% summary()
a_sample %>% log() %>%  summary()
effect_se(
centre = median(a_sample),
spread = diff(quantile(a_sample, c(0.75, 0.25))),
n = length(a_sample),
centre_type = "median",
spread_type = "iqr"
)
diff(quantile(a_sample, c(0.75, 0.25)))
quantile(a_sample, c(0.75, 0.25))
quantile(a_sample, c(0.75, 0.25)) %>% diff()
quantile(a_sample, c(0.25, 0.75)) %>% diff()
effect_se(
centre = median(a_sample),
spread = diff(quantile(a_sample, c(0.25, 0.75))),
n = length(a_sample),
centre_type = "median",
spread_type = "iqr"
)
# consider a randomly generated sample
(a_sample <- rlnorm(10, 4, 0.2))
# summary statistics for this sample
a_sample %>% log() %>% summary()
# calculate the standard error based on the
effect_se(
centre = median(a_sample),
spread = IQR(a_sample),
# spread = diff(quantile(a_sample, c(0.25, 0.75))),
n = length(a_sample),
centre_type = "median",
spread_type = "iqr"
)
# consider a randomly generated sample
(a_sample <- rlnorm(10, 4, 0.2))
# summary statistics for this sample
a_sample %>% log() %>% summary()
# calculate the standard error based on the
effect_se(
centre = median(a_sample),
spread = IQR(a_sample),
n = length(a_sample),
centre_type = "median",
spread_type = "iqr"
)
library(varameta)
?bland_se
a_sample <- rexp(100, 3)
a_sample
quantile(a_sample, 0.75)
quantile(a_sample, 0.5)
median(a_sample)
?bland_mean
?hozo_mean()
?wan_mean_C1
?wan_se_C1
?wan_se_C2
?wan_mean_C2
?wan_mean_C2
?wan_mean_C3
?hozo_mean
?wan_mean_C3
?wan_se_C3
effect_se(3, 1, 5, "mean", "sd")
1/sqrt(5)
range(c(1, 2, 5))
diff(range(1, 3, 6))
library(tidyverse)
set.seed(39)
library(varameta)
# consider a randomly generated sample
(a_sample <- rlnorm(10, 4, 0.2))
# taken from lognormal distribution with log values of mean and standard deviation 4 and 0.2
tibble(x = c(0,1)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dlnorm, args = list(
meanlog = 4,
meansd = 0.2
))
# summary statistics for this sample
a_sample %>% log() %>% summary()
# calculate the standard error based on the median, interquartile range, and
# sample size
effect_se(
centre = median(a_sample),
spread = IQR(a_sample),
n = length(a_sample),
centre_type = "median",
spread_type = "iqr"
)
?dlnorm
# consider a randomly generated sample
(a_sample <- rlnorm(10, 4, 0.2))
# taken from lognormal distribution with log values of mean and standard deviation 4 and 0.2
tibble(x = c(0,1)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dlnorm, args = list(
meanlog = 4,
sdlog = 0.2
))
# summary statistics for this sample
a_sample %>% log() %>% summary()
# calculate the standard error based on the median, interquartile range, and
# sample size
effect_se(
centre = median(a_sample),
spread = IQR(a_sample),
n = length(a_sample),
centre_type = "median",
spread_type = "iqr"
)
xaringan::inf_mr()
?geom_density
# consider a randomly generated sample
(a_sample <- rlnorm(10, -1, 0.2))
?stat_function
0.1^2
panda("test")
panda("Whatever pandoc is it is not cute like a panda.")
panda("Whatever pandoc is, it is not cute like a panda.")
rmarkdown::pandoc_version()
rmarkdown::pandoc_version()
devtools::install_github("rensa/xaringan")
library(varameta)
set.seed(39)
library(varameta)
library(tidyverse)
sample_size <- 10
# get a sample
a_sample <- rexp(sample_size)
# get standard error of the sample median
effect_se(
centre = median(a_sample),
spread = IQR(a_sample),
n = length(a_sample),
centre_type = "median",
spread_type = "iqr"
)
sim_stats()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
set.seed(39)
library(varameta)
library(tidyverse)
sample_size <- 10
# get a sample
a_sample <- rexp(sample_size)
# get standard error of the sample median
effect_se(
centre = median(a_sample),
spread = IQR(a_sample),
n = length(a_sample),
centre_type = "median",
spread_type = "iqr"
)
sim_stats()
set.seed(39)
library(varameta)
library(tidyverse)
library(simeta)
sample_size <- 10
sim_stats() %>%
dplyr::filter(group == "control")
?effect_se
sim_stats() %>%
dplyr::filter(group == "control") %>%
mutate(
effect_se = pmap(
list(
centre = effect,
spread = effect_spread,
n = n
),
effect_se,
centre_type = "median",
spread_type = "iqr"
)
)
sim_stats() %>%
dplyr::filter(group == "control") %>%
mutate(
effect_se = pmap_dbl(
list(
centre = effect,
spread = effect_spread,
n = n
),
effect_se,
centre_type = "median",
spread_type = "iqr"
)
)
sim_stats() %>%
dplyr::filter(group == "control") %>%
mutate(effect_se = pmap_dbl(
list(centre = effect,
spread = effect_spread,
n = n),
effect_se,
centre_type = "median",
spread_type = "iqr"
))
# for reproducibility
set.seed(39)
# packages
library(varameta)
library(tidyverse)
library(simeta)
# move to parameter when done with chunk-wise?
sample_size <- 10
# get a sample
a_sample <- rexp(sample_size)
# get standard error of the sample median
effect_se(
centre = median(a_sample),
spread = IQR(a_sample),
n = length(a_sample),
centre_type = "median",
spread_type = "iqr"
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# for reproducibility
set.seed(39)
# packages
library(varameta)
library(tidyverse)
library(simeta)
# move to parameter when done with chunk-wise?
sample_size <- 10
citr:::insert_citation()
citr:::insert_citation()
# for reproducibility
set.seed(39)
# packages
library(varameta)
library(tidyverse)
library(simeta)
library(panda)
# move to parameter when done with chunk-wise?
sample_size <- 10
panda(
panda = 35,
"varameta:: provides several estimators for the variances of the sample median")
panda(
panda = 49,
"varameta:: provides several estimators for the variances of the sample median")
meta_data <- sim_stats() %>%
dplyr::filter(group == "control")
meta_data
?effect_se
# borrowing from sister package simeta:: to simulate a dataset
(meta_data <- sim_stats() %>%
dplyr::filter(group == "control"))
# add a vecorised
# todo function this (after report)
meta_data %>%
mutate(
effect_se = pmap_dbl(
list(centre = effect, spread = effect_spread, n = n),
effect_se,
centre_type = "median",
spread_type = "iqr"
)
)
c(4,5)
c(4,5) %>% sample(1)
c(2,3,5,4.1,6.1,7.2)
c(2,3,5,4.1,6.1,7.2) %>% sample(3)
xaringan::inf_mr()
diff(3-2)
diff(range(seq(1:5)))
xaringan::inf_mr()
rmarkdown::render("vignettes/", "all")
rmarkdown::render("vignettes/varameta.Rmd", "all")
rmarkdown::render("vignettes/varameta.Rmd", "all")
rmarkdown::render("vignettes/varameta.Rmd", "all")
?rmarkdown::render
rmarkdown::render("vignettes/varameta.Rmd", "all")
library(varameta)
citation("varameta")
library(varameta)
citation("varameta")
library(varameta)
citation("varameta")
citation('simeta')
